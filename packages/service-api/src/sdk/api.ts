/* tslint:disable */
/* eslint-disable */
/**
 * @beaver/service-api
 * testing the fastify swagger api
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiChatCompletionPost200Response
 */
export interface ApiChatCompletionPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiChatCompletionPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiChatCompletionPost200Response
     */
    'object': ApiChatCompletionPost200ResponseObjectEnum;
    /**
     * 
     * @type {number}
     * @memberof ApiChatCompletionPost200Response
     */
    'created': number;
    /**
     * 
     * @type {string}
     * @memberof ApiChatCompletionPost200Response
     */
    'model': string;
    /**
     * 
     * @type {Array<ApiChatCompletionPost200ResponseChoicesInner>}
     * @memberof ApiChatCompletionPost200Response
     */
    'choices': Array<ApiChatCompletionPost200ResponseChoicesInner>;
    /**
     * 
     * @type {ApiChatCompletionPost200ResponseUsage}
     * @memberof ApiChatCompletionPost200Response
     */
    'usage': ApiChatCompletionPost200ResponseUsage;
    /**
     * 
     * @type {string}
     * @memberof ApiChatCompletionPost200Response
     */
    'system_fingerprint': string;
}

export const ApiChatCompletionPost200ResponseObjectEnum = {
    ChatCompletion: 'chat.completion'
} as const;

export type ApiChatCompletionPost200ResponseObjectEnum = typeof ApiChatCompletionPost200ResponseObjectEnum[keyof typeof ApiChatCompletionPost200ResponseObjectEnum];

/**
 * 
 * @export
 * @interface ApiChatCompletionPost200ResponseChoicesInner
 */
export interface ApiChatCompletionPost200ResponseChoicesInner {
    /**
     * 
     * @type {number}
     * @memberof ApiChatCompletionPost200ResponseChoicesInner
     */
    'index': number;
    /**
     * 
     * @type {ApiChatCompletionPost200ResponseChoicesInnerMessage}
     * @memberof ApiChatCompletionPost200ResponseChoicesInner
     */
    'message': ApiChatCompletionPost200ResponseChoicesInnerMessage;
    /**
     * 
     * @type {object}
     * @memberof ApiChatCompletionPost200ResponseChoicesInner
     */
    'logprobs': object | null;
    /**
     * 
     * @type {string}
     * @memberof ApiChatCompletionPost200ResponseChoicesInner
     */
    'finish_reason': string;
}
/**
 * 
 * @export
 * @interface ApiChatCompletionPost200ResponseChoicesInnerMessage
 */
export interface ApiChatCompletionPost200ResponseChoicesInnerMessage {
    /**
     * 
     * @type {string}
     * @memberof ApiChatCompletionPost200ResponseChoicesInnerMessage
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ApiChatCompletionPost200ResponseChoicesInnerMessage
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof ApiChatCompletionPost200ResponseChoicesInnerMessage
     */
    'refusal': string | null;
}
/**
 * 
 * @export
 * @interface ApiChatCompletionPost200ResponseUsage
 */
export interface ApiChatCompletionPost200ResponseUsage {
    /**
     * 
     * @type {number}
     * @memberof ApiChatCompletionPost200ResponseUsage
     */
    'prompt_tokens': number;
    /**
     * 
     * @type {number}
     * @memberof ApiChatCompletionPost200ResponseUsage
     */
    'completion_tokens': number;
    /**
     * 
     * @type {number}
     * @memberof ApiChatCompletionPost200ResponseUsage
     */
    'total_tokens': number;
    /**
     * 
     * @type {ApiChatCompletionPost200ResponseUsageCompletionTokensDetails}
     * @memberof ApiChatCompletionPost200ResponseUsage
     */
    'completion_tokens_details': ApiChatCompletionPost200ResponseUsageCompletionTokensDetails;
}
/**
 * 
 * @export
 * @interface ApiChatCompletionPost200ResponseUsageCompletionTokensDetails
 */
export interface ApiChatCompletionPost200ResponseUsageCompletionTokensDetails {
    /**
     * 
     * @type {number}
     * @memberof ApiChatCompletionPost200ResponseUsageCompletionTokensDetails
     */
    'reasoning_tokens': number;
}
/**
 * 
 * @export
 * @interface ApiChatCompletionPostRequest
 */
export interface ApiChatCompletionPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiChatCompletionPostRequest
     */
    'prompt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiChatCompletionPostRequest
     */
    'model'?: string;
}
/**
 * Successful response
 * @export
 * @interface ApiGet200Response
 */
export interface ApiGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiGet200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Def0
 */
export interface Def0 {
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'error': string;
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof Def0
     */
    'statusCode': number;
}
/**
 * Response for created resources
 * @export
 * @interface Def1
 */
export interface Def1 {
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface Def2
 */
export interface Def2 {
    /**
     * 
     * @type {string}
     * @memberof Def2
     */
    'error': Def2ErrorEnum;
    /**
     * 
     * @type {number}
     * @memberof Def2
     */
    'statusCode': Def2StatusCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof Def2
     */
    'message': string;
}

export const Def2ErrorEnum = {
    NotFound: 'Not Found'
} as const;

export type Def2ErrorEnum = typeof Def2ErrorEnum[keyof typeof Def2ErrorEnum];
export const Def2StatusCodeEnum = {
    NUMBER_404: 404
} as const;

export type Def2StatusCodeEnum = typeof Def2StatusCodeEnum[keyof typeof Def2StatusCodeEnum];

/**
 * The service could not serve the request because of a client side related error
 * @export
 * @interface Def3
 */
export interface Def3 {
    /**
     * 
     * @type {string}
     * @memberof Def3
     */
    'error': Def3ErrorEnum;
    /**
     * 
     * @type {number}
     * @memberof Def3
     */
    'statusCode': Def3StatusCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof Def3
     */
    'message': string;
}

export const Def3ErrorEnum = {
    BadRequest: 'Bad Request'
} as const;

export type Def3ErrorEnum = typeof Def3ErrorEnum[keyof typeof Def3ErrorEnum];
export const Def3StatusCodeEnum = {
    NUMBER_400: 400
} as const;

export type Def3StatusCodeEnum = typeof Def3StatusCodeEnum[keyof typeof Def3StatusCodeEnum];

/**
 * Response for not authenticated users
 * @export
 * @interface Def4
 */
export interface Def4 {
    /**
     * 
     * @type {string}
     * @memberof Def4
     */
    'error': Def4ErrorEnum;
    /**
     * 
     * @type {string}
     * @memberof Def4
     */
    'message': Def4MessageEnum;
    /**
     * 
     * @type {number}
     * @memberof Def4
     */
    'statusCode': Def4StatusCodeEnum;
}

export const Def4ErrorEnum = {
    Unauthorized: 'Unauthorized'
} as const;

export type Def4ErrorEnum = typeof Def4ErrorEnum[keyof typeof Def4ErrorEnum];
export const Def4MessageEnum = {
    NotValid: 'auth_header_not_valid',
    Missed: 'auth_header_missed'
} as const;

export type Def4MessageEnum = typeof Def4MessageEnum[keyof typeof Def4MessageEnum];
export const Def4StatusCodeEnum = {
    NUMBER_401: 401
} as const;

export type Def4StatusCodeEnum = typeof Def4StatusCodeEnum[keyof typeof Def4StatusCodeEnum];

/**
 * Response if user does not have all the requested rights
 * @export
 * @interface Def5
 */
export interface Def5 {
    /**
     * 
     * @type {string}
     * @memberof Def5
     */
    'error': Def5ErrorEnum;
    /**
     * 
     * @type {string}
     * @memberof Def5
     */
    'message': Def5MessageEnum;
    /**
     * 
     * @type {number}
     * @memberof Def5
     */
    'statusCode': Def5StatusCodeEnum;
}

export const Def5ErrorEnum = {
    Forbidden: 'Forbidden'
} as const;

export type Def5ErrorEnum = typeof Def5ErrorEnum[keyof typeof Def5ErrorEnum];
export const Def5MessageEnum = {
    NoSufficientRights: 'no_sufficient_rights'
} as const;

export type Def5MessageEnum = typeof Def5MessageEnum[keyof typeof Def5MessageEnum];
export const Def5StatusCodeEnum = {
    NUMBER_403: 403
} as const;

export type Def5StatusCodeEnum = typeof Def5StatusCodeEnum[keyof typeof Def5StatusCodeEnum];


/**
 * ChatCompletionApi - axios parameter creator
 * @export
 */
export const ChatCompletionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a chat completion
         * @param {ApiChatCompletionPostRequest} apiChatCompletionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChatCompletionPost: async (apiChatCompletionPostRequest: ApiChatCompletionPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiChatCompletionPostRequest' is not null or undefined
            assertParamExists('apiChatCompletionPost', 'apiChatCompletionPostRequest', apiChatCompletionPostRequest)
            const localVarPath = `/api/chat-completion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiChatCompletionPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatCompletionApi - functional programming interface
 * @export
 */
export const ChatCompletionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChatCompletionApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a chat completion
         * @param {ApiChatCompletionPostRequest} apiChatCompletionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChatCompletionPost(apiChatCompletionPostRequest: ApiChatCompletionPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiChatCompletionPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChatCompletionPost(apiChatCompletionPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChatCompletionApi.apiChatCompletionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChatCompletionApi - factory interface
 * @export
 */
export const ChatCompletionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChatCompletionApiFp(configuration)
    return {
        /**
         * Create a chat completion
         * @param {ApiChatCompletionPostRequest} apiChatCompletionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChatCompletionPost(apiChatCompletionPostRequest: ApiChatCompletionPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiChatCompletionPost200Response> {
            return localVarFp.apiChatCompletionPost(apiChatCompletionPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatCompletionApi - object-oriented interface
 * @export
 * @class ChatCompletionApi
 * @extends {BaseAPI}
 */
export class ChatCompletionApi extends BaseAPI {
    /**
     * Create a chat completion
     * @param {ApiChatCompletionPostRequest} apiChatCompletionPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatCompletionApi
     */
    public apiChatCompletionPost(apiChatCompletionPostRequest: ApiChatCompletionPostRequest, options?: RawAxiosRequestConfig) {
        return ChatCompletionApiFp(this.configuration).apiChatCompletionPost(apiChatCompletionPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * IndexApi - axios parameter creator
 * @export
 */
export const IndexApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the index route
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndexApi - functional programming interface
 * @export
 */
export const IndexApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IndexApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the index route
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IndexApi.apiGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IndexApi - factory interface
 * @export
 */
export const IndexApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IndexApiFp(configuration)
    return {
        /**
         * Get the index route
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiGet200Response> {
            return localVarFp.apiGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IndexApi - object-oriented interface
 * @export
 * @class IndexApi
 * @extends {BaseAPI}
 */
export class IndexApi extends BaseAPI {
    /**
     * Get the index route
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndexApi
     */
    public apiGet(options?: RawAxiosRequestConfig) {
        return IndexApiFp(this.configuration).apiGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PingApi - axios parameter creator
 * @export
 */
export const PingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the ping route
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPingGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PingApi - functional programming interface
 * @export
 */
export const PingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PingApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the ping route
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPingGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPingGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PingApi.apiPingGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PingApi - factory interface
 * @export
 */
export const PingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PingApiFp(configuration)
    return {
        /**
         * Get the ping route
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPingGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiGet200Response> {
            return localVarFp.apiPingGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PingApi - object-oriented interface
 * @export
 * @class PingApi
 * @extends {BaseAPI}
 */
export class PingApi extends BaseAPI {
    /**
     * Get the ping route
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingApi
     */
    public apiPingGet(options?: RawAxiosRequestConfig) {
        return PingApiFp(this.configuration).apiPingGet(options).then((request) => request(this.axios, this.basePath));
    }
}



